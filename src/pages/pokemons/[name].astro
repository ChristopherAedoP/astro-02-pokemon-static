---
import type { GetStaticPaths } from 'astro';
import MainLayout from '@layouts/MainLayout.astro';
import PokemonCard from '@components/pokemons/PokemonCard.astro';
import type { PokemonListResponse } from '@interfaces/pokemon-list.response';
import Title from '@components/shared/Title.astro';
import { Icon } from 'astro-icon/components';
import { bigint } from 'astro/zod';
// export const getStaticPaths = (() => {
// 	return [
// 		{
// 			params: { name: 'caterpie' },
// 			props: { name: 'caterpie', url: 'https://pokeapi.co/api/v2/pokemon/10/' },
// 		},
// 		{ params: { name: 'charmander' } },
// 		{ params: { name: 'venusaur' } },
// 	];
// }) satisfies GetStaticPaths;

export const getStaticPaths = (async () => {
	const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
	const { results } = (await resp.json()) as PokemonListResponse;

	return results.map(({ name, url }) => ({
		params: { name: name },
		props: { name: name, url: url },
	}));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
	title=`Pokémon - #${id} ${name}`
	description=`Informacion sobre el pokémon ${name}`
	image={imageSrc}>
	<section class="mt-10 mx-10 flex flex-col justify-center items-center">
		<div class="flex flex-row">
			<div>
				<!-- <a href="/">Regresar</a> -->
				<button class="text-blue-500" onclick="history.back()">
					Regresar
				</button>
				<Title> {name} </Title>
			</div>

			<button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
				<Icon data-outline name="heart-empy" size={50} />
				<Icon
					data-full
					class="hidden"
					name="heart-full"
					size={50}
					color="red"
				/>
			</button>
		</div>

		<PokemonCard name={name} url={url} isBig />

		<audio controls class="mt-5">
			<source src={audioSrc} type="audio/ogg" />
		</audio>
	</section>
</MainLayout>

<script>
	import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

	const handlePageLoad = () => {
		let favoritePokemons: FavoritePokemon[] = [];
		const favoritePokemonsString = localStorage.getItem('favoritePokemons');
		if (favoritePokemonsString) {
			favoritePokemons = JSON.parse(favoritePokemonsString);
		}
		console.log({ favoritePokemons });

		const btnFavorite = document.querySelector(
			'#btn-favorite'
		) as HTMLButtonElement;

		if (!btnFavorite) return;

		const name = btnFavorite.dataset.name ?? '';
		const id = btnFavorite.dataset.id ?? '';
		const isFavorite = favoritePokemons.some(
			(pokemon) => pokemon.name === name
		);

		const heartOutLine = btnFavorite.querySelector(
			'[data-outline]'
		) as HTMLButtonElement;

		const heartFull = btnFavorite.querySelector(
			'[data-full]'
		) as HTMLButtonElement;

		//buscar si existe el pokemon en favoritos
		if (isFavorite) {
			heartOutLine.classList.add('hidden');
			heartFull.classList.remove('hidden');
		} else {
			heartOutLine.classList.remove('hidden');
			heartFull.classList.add('hidden');
		}

		const toggleFavorite = () => {
			const isFavorite = favoritePokemons.some(
				(pokemon) => pokemon.name === name
			);

			if (isFavorite) {
				//remove
				favoritePokemons = favoritePokemons.filter(
					(pokemon) => pokemon.name !== name
				);
			} else {
				favoritePokemons.push({ name, id: +id });
			}

			localStorage.setItem(
				'favoritePokemons',
				JSON.stringify(favoritePokemons)
			);
		};

		btnFavorite.addEventListener('click', () => {
			heartOutLine.classList.toggle('hidden');
			heartFull.classList.toggle('hidden');
			toggleFavorite();
		});

	};

	// document.addEventListener('astro:before-preparation', () => {
	// 	console.log('astro:before-preparation');
	// });
	// document.addEventListener('astro:after-preparation', () => {
	// 	console.log('astro:after-preparation');
	// });
	// document.addEventListener('astro:before-swap', () => {
	// 	console.log('astro:before-swap');
	// });
	// document.addEventListener('astro:after-swap', () => {
	// 	console.log('astro:after-swap');
	// });
	// document.addEventListener('astro:page-load', () => {
	// 	console.log('astro:page-load');
	// });

	document.addEventListener('astro:page-load', handlePageLoad);
</script>

<style>
	a {
		@apply hover:underline text-blue-500;
	}
	#btn-favorite {
		@apply hover:animate-pulse;
	}
</style>
